#Xbox JOY in ROS (python)    
  
  #!/usr/bin/env python
    #rospy is a pure Python client library for ROS.
    import rospy
    #Twist is for "Twist-based robots in ROS, which use a standard joystick (JOY)
    from geometry_msgs.msg import Twist
    from sensor_msgs.msg import Joy

    #ROS node to allow an XBox controller to guide a turtlebot in a sim 


#STEP 1:DISABLING AND BLACK LISTING THE KERNEL DRIVER

    #xboxdrv is a third party user-space driver.
    #Before use the kernal driver must be blacklisted
    #The xpad (IMPORTANT) driver must also be loaded
    
    #This ROS command...
    sudo rrmod xpad
    
    #...unloads the kernal driver
    sudo su
    echo "blacklist xpad" > /etc/modprode.d/blacklist.conf
    
    
#STEP 2: INSTALLING XBOXDRV

    #This is an alternative to installing the package from Ubuntu Repositories
    #Developoer repositories ensure the latest version
    
    #Check repository version
    sudo add-apt-repository ppa:grumbel/ppa
    sudo apt-get update
    sudo apt-get install xboxdrv
    
    
#STEP 3: USING XBOXDRV

    xboxdrv #might need root access
    #Root access = https://answers.ros.org/question/165246/launch-node-with-root-permissions/

    #Silent stops the constant flow of information being sent from input commands
    --silent
    
    #Check the joystick input entry
    ls - l /dev/input

#............CODE START............


#Check for compatibility issues in MELODIC

    # Receives joystick messages (subscribed to Joy topic)
    # then converts the joysick inputs into Twist commands
    # axis 1 aka left stick vertical controls linear speed
    # axis 0 aka left stick horizonal controls angular speed
    
    #RAW JOY MESSAGE DEFINITION
    
    Raw Message Definition
    
    # Reports the state of a joysticks axes and buttons.
    #Header header           = timestamp in the header is the time the data is received from the joystick
    #float32[] axes          = the axes measurements from a joystick
    #int32[] buttons         = the buttons measurements from a joystick 

    def callback(data):
        twist = Twist()
        #Joystick Input: These are the axis measurements
        twist.linear.x = 4*data.axes[1]
        twist.angular.z = 4*data.axes[0]
        pub.publish(twist)

    # Intializes everything
    def start():
        # publishing to "turtle1/cmd_vel" to control turtle1
        global pub
        pub = rospy.Publisher('turtle1/cmd_vel', Twist)
        # subscribed to joystick inputs on topic "joy"
        rospy.Subscriber("joy", Joy, callback)
        # starts the node
        rospy.init_node('Joy2Turtle')
        rospy.spin()

    if __name__ == '__main__':
        start()


#............CODE END............    
 
 
#ACTUALLY RUNNING THE TEST

 #Install ROS and Set up the Catkin workspace (Create src folder)
        
 #Install the xbox driver
 xboxdrv
 
 #Make sure the joystick node is executable
 tests/turtle\_teleop\_joy.py
        
 # starting ROS
 roscore

 # xboxdrv in silent mode (in a new console window)
 sudo xboxdrv --silent

 # starting the joy node (in another new window)
 rosrun joy joy_node

 # starting turtlesim (in another new window)
 rosrun turtlesim turtlesim_node

 # starting the "translator" node (in another new window)
 rosrun beaglecar turtle_teleop_joy.py
